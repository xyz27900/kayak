name: "Quality Assurance"

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-workspace:
    name: "🛠️ Build workspace"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16]

    steps:
      - name: "Checkout"
        uses: actions/checkout@v3

      - name: Install Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: "Install pnpm"
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: "Get pnpm store directory"
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: "Setup pnpm cache"
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: "Install dependencies"
        run: pnpm install --frozen-lockfile

      - name: "Build packages/core"
        working-directory: packages/core
        run: |
          pnpm build

      - name: "Build packages/metamask"
        working-directory: packages/metamask
        run: |
          pnpm build

      - name: "Build packages/cypress"
        working-directory: packages/cypress
        run: |
          pnpm build

      - name: "Build packages/playwright"
        working-directory: packages/playwright
        run: |
          pnpm build

      - name: "Build packages/cli"
        working-directory: packages/cli
        run: |
          pnpm build

      - name: "Copy workspace files to /tmp"
        run: |
          mkdir -p /tmp/workspace
          cp -r packages /tmp/workspace/packages
          find . -name 'node_modules' -not -path './node_modules/*' -type d -prune -exec sh -c 'mkdir -p /tmp/workspace/${0#./}; cp -r "$0" /tmp/workspace/${0#./}' {} \;

      - name: "Compress workspace files"
        run: |
          tar -czf kayak-workspace.tar.gz -C /tmp/workspace .

      - name: "Upload workspace artifact"
        uses: actions/upload-artifact@v3
        with:
          name: kayak-workspace
          path: kayak-workspace.tar.gz

  lint:
    name: "👀 Lint"
    runs-on: ubuntu-latest
    needs: build-workspace

    steps:
      - name: "Checkout"
        uses: actions/checkout@v3

      - name: "Download workspace artifact"
        uses: actions/download-artifact@v3
        with:
          name: kayak-workspace
          path: /tmp

      - name: "Decompress workspace files replacing existing files in current directory"
        run: |
          tar -xzf /tmp/kayak-workspace.tar.gz -C . --overwrite --strip-components 1

      - name: "Lint Scripts"
        working-directory: scripts
        run: |
          pnpm lint

      - name: "Lint Docs"
        working-directory: docs
        run: |
          pnpm lint

      - name: "Lint packages/cli"
        working-directory: packages/cli
        run: |
          pnpm lint

      - name: "Lint packages/core"
        working-directory: packages/core
        run: |
          pnpm lint

      - name: "Lint packages/cypress"
        working-directory: packages/cypress
        run: |
          pnpm lint

      - name: "Lint packages/metamask"
        working-directory: packages/metamask
        run: |
          pnpm lint

      - name: "Lint packages/playwright"
        working-directory: packages/playwright
        run: |
          pnpm lint

      - name: "Lint examples/cypress"
        working-directory: examples/cypress
        run: |
          pnpm lint

      - name: "Lint examples/cypress-plugin"
        working-directory: examples/cypress-plugin
        run: |
          pnpm lint

      - name: "Lint examples/playwright"
        working-directory: examples/playwright
        run: |
          pnpm lint

      - name: "Lint examples/playwright-plugin"
        working-directory: examples/playwright-plugin
        run: |
          pnpm lint

  test:
    name: "🧪 Test"
    runs-on: ubuntu-latest
    needs: build-workspace

    steps:
      - name: "Checkout"
        uses: actions/checkout@v3

      - name: "Download workspace artifact"
        uses: actions/download-artifact@v3
        with:
          name: kayak-workspace
          path: /tmp

      - name: "Decompress workspace files replacing existing files in current directory"
        run: |
          tar -xzf /tmp/kayak-workspace.tar.gz -C . --overwrite --strip-components 1

      - name: "Test packages/cli"
        working-directory: packages/cli
        run: |
          pnpm test

  cleanup:
    name: "🧹 Cleanup"
    runs-on: ubuntu-latest
    needs:
      - lint
      - test
    if: always()

    steps:
      - name: "Delete artifacts"
        uses: geekyeggo/delete-artifact@v2
        with:
          name: kayak-workspace
