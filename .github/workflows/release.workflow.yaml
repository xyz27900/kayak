name: "Release new version"

env:
  NODE_VERSION: 18
  PNPM_VERSION: 8

on:
  push:
    tags:
      - "v*"

jobs:
  check-qa-workflow:
    name: "üîé‚ÄÇCheck QA workflow status"
    runs-on: ubuntu-latest

    steps:
      - name: "Check if QA workflow for current commit succeeded"
        run: |
          curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/actions/workflows/qa.workflow.yaml/runs?head_sha=${{ github.sha }}" | \
            yq '.workflow_runs[] | select(.status == "completed" and .conclusion == "success") | .html_url' | \
            xargs -I {} echo "QA workflow succeeded: {}"

  build-npm:
    name: "üõ†Ô∏è‚ÄÇBuild NPM packages"
    runs-on: ubuntu-latest
    needs:
      - check-qa-workflow

    env:
      PATHS: |
        packages/core
        packages/metamask
        packages/cypress
        packages/playwright
        packages/cli

    steps:
      - name: "Checkout"
        uses: actions/checkout@v3

      - name: "Setup pnpm"
        uses: ./.github/actions/setup-pnpm
        with:
          node-version: ${{ env.NODE_VERSION }}
          pnpm-version: ${{ env.PNPM_VERSION }}
          cache: true

      - name: "Install dependencies"
        run: pnpm install --frozen-lockfile

      - name: "Build packages"
        uses: ./.github/actions/execute-in-paths
        with:
          paths: ${{ env.PATHS }}
          command: pnpm build

      - name: "Remove node_modules"
        run: |
          find . -name 'node_modules' -type d -prune -exec rm -rf '{}' +

      - name: "Copy NPM packages files to /tmp/packages"
        run: |
          mkdir -p /tmp/packages
          cp -r ./packages /tmp/packages

      - name: "Compress NPM packages files"
        run: |
          tar -czf npm-packages.tar.gz -C /tmp/packages .

      - name: "Upload NPM packages artifact"
        uses: actions/upload-artifact@v3
        with:
          name: npm-packages
          path: npm-packages.tar.gz

#  publish-npm:
#    name: "üì¶‚ÄÇPublish NPM packages"
#    runs-on: ubuntu-latest
#    needs: build-npm
#    strategy:
#      matrix:
#        node-version: [16]
#
#    steps:
#      - name: "Install Node.js ${{ matrix.node-version }}"
#        uses: actions/setup-node@v3
#        with:
#          node-version: ${{ matrix.node-version }}
#
#      - name: "Download NPM packages artifact"
#        uses: actions/download-artifact@v3
#        with:
#          name: npm-packages
#          path: /tmp
#
#      - name: "Decompress NPM packages files"
#        run: |
#          tar -xzf /tmp/npm-packages.tar.gz -C .
#
#      - name: "Publish packages/core"
#        working-directory: packages/core
#        run: |
#          pnpm publish
#        env:
#          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
#
#      - name: "Publish packages/metamask"
#        working-directory: packages/metamask
#        run: |
#          pnpm publish
#        env:
#          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
#
#      - name: "Publish packages/cypress"
#        working-directory: packages/cypress
#        run: |
#          pnpm publish
#        env:
#          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
#
#      - name: "Publish packages/playwright"
#        working-directory: packages/playwright
#        run: |
#          pnpm publish
#        env:
#          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
#
#      - name: "Publish packages/cli"
#        working-directory: packages/cli
#        run: |
#          pnpm publish
#        env:
#          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  cleanup:
    name: "üßπ‚ÄÇCleanup"
    runs-on: ubuntu-latest
    needs:
      - build-npm

    steps:
      - name: "Delete artifacts"
        uses: geekyeggo/delete-artifact@v2
        with:
          name: npm-packages
