name: "Quality Assurance"

env:
  PNPM_VERSION: 8

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-npm:
    name: "üì¶‚ÄÇBuild NPM packages"
    uses: ./.github/workflows/npm.workflow.yaml
    with:
      pnpm-version: 8

  build-workspace:
    name: "üõ†Ô∏è‚ÄÇBuild workspace"
    runs-on: ubuntu-latest
    needs:
      - build-npm

    steps:
      - name: "Checkout"
        uses: actions/checkout@v3

      - name: "Get Node.js version"
        id: get-node-version
        uses: ./.github/actions/get-node-version

      - name: "Setup pnpm"
        uses: ./.github/actions/setup-pnpm
        with:
          node-version: ${{ steps.get-node-version.outputs.NODE_VERSION }}
          pnpm-version: ${{ env.PNPM_VERSION }}
          cache: true

      - name: "Install dependencies"
        run: pnpm install --frozen-lockfile

      - name: "Download NPM packages from storage"
        uses: actions/download-artifact@v3
        with:
          name: npm-packages-${{ steps.get-node-version.outputs.NODE_VERSION }}
          path: /tmp/npm-packages

      - name: "Unpack NPM packages"
        run: |
          find /tmp/npm-packages -name '*.tgz' -exec sh -c 'dir="${0%.tgz}"; mkdir -p "$dir" && tar -xzf "$0" -C "$dir" --strip-components=1' {} \;

      - name: "Move NPM packages files to workspace"
        run: |
          while read -r file; do
            package_name=$(yq -oy '.name' "$file" | sed 's/@//g; s#/#-#g')
            readarray -t package_files < <(yq -oy '.files' "$file" | yq -oy '.[]')

            for path in "${package_files[@]}"; do
              escaped_path=$(sed 's/ /\\ /g; s/\*/\\*/g; s/\?/\\?/g' <<< "$path")
              package_dir=$(dirname "$file")

              while IFS= read -r -d $'\0' filepath; do
                if [ -d "$filepath" ]; then
                  echo "Copying $filepath to $package_dir"
                  cp -rf "$filepath" "$package_dir"
                elif [ -f "$filepath" ]; then
                  echo "Copying $filepath to $package_dir"
                  cp -f "$filepath" "$package_dir"
                else
                  echo "$filepath is neither a directory nor a file"
                fi
              done < <(find "/tmp/npm-packages/$package_name" -type f -name "$escaped_path" -print0)

              ls -la "$package_dir"
            done

            rm -rf "/tmp/npm-packages/$package_name"
          done < <(find packages -type f -name 'package.json' -not -path '*/node_modules/*' -not -path '/*cache/*')

      - name: "Compress workspace"
        run: |
          mkdir -p /tmp/workspace
          cp -r ./packages /tmp/workspace/packages
          find . -name 'node_modules' -not -path './node_modules/*' -type d -prune -exec sh -c 'mkdir -p /tmp/workspace/${0#./}; cp -rT "$0" /tmp/workspace/${0#./}' {} \;
          tar -czf /tmp/workspace-${{ steps.get-node-version.outputs.NODE_VERSION }}.tar.gz -C /tmp/workspace .

      - name: "Upload workspace to storage"
        uses: actions/upload-artifact@v3
        with:
          name: workspace-${{ steps.get-node-version.outputs.NODE_VERSION }}
          path: /tmp/workspace-${{ steps.get-node-version.outputs.NODE_VERSION }}.tar.gz
#  build-docker:
#    name: "üê≥‚ÄÇBuild Docker images"
#    uses: ./.github/workflows/docker.workflow.yaml
  lint:
    name: "üëÄ‚ÄÇLint"
    runs-on: ubuntu-latest
    needs:
      - build-workspace

    env:
      PATHS: |
        scripts
        docs
        packages/cli
        packages/core
        packages/cypress
        packages/metamask
        packages/playwright

    steps:
      - name: "Checkout"
        uses: actions/checkout@v3

      - name: "Get Node.js version"
        id: get-node-version
        uses: ./.github/actions/get-node-version

      - name: "Setup pnpm"
        uses: ./.github/actions/setup-pnpm
        with:
          node-version: ${{ steps.get-node-version.outputs.NODE_VERSION }}
          pnpm-version: ${{ env.PNPM_VERSION }}

      - name: "Download workspace from storage"
        uses: actions/download-artifact@v3
        with:
          name: workspace-${{ steps.get-node-version.outputs.NODE_VERSION }}
          path: /tmp

      - name: "Decompress workspace files"
        run: |
          tar -xzf /tmp/workspace-${{ steps.get-node-version.outputs.NODE_VERSION }}.tar.gz -C . --overwrite

      - name: "Run linters"
        uses: ./.github/actions/execute-for-paths
        with:
          paths: ${{ env.PATHS }}
          run: |
            pnpm lint

  unit-tests:
    name: "üß™‚ÄÇUnit tests"
    runs-on: ubuntu-latest
    needs:
      - build-workspace

    env:
      PATHS: |
        packages/cli

    steps:
      - name: "Checkout"
        uses: actions/checkout@v3

      - name: "Get Node.js version"
        id: get-node-version
        uses: ./.github/actions/get-node-version

      - name: "Setup pnpm"
        uses: ./.github/actions/setup-pnpm
        with:
          node-version: ${{ steps.get-node-version.outputs.NODE_VERSION }}
          pnpm-version: ${{ env.PNPM_VERSION }}

      - name: "Download workspace from storage"
        uses: actions/download-artifact@v3
        with:
          name: workspace-${{ steps.get-node-version.outputs.NODE_VERSION }}
          path: /tmp

      - name: "Decompress workspace files"
        run: |
          tar -xzf /tmp/workspace-${{ steps.get-node-version.outputs.NODE_VERSION }}.tar.gz -C . --overwrite

      - name: "Run tests"
        uses: ./.github/actions/execute-for-paths
        with:
          paths: ${{ env.PATHS }}
          command: |
            pnpm test

#  cleanup:
#    name: "üßπ‚ÄÇCleanup"
#    runs-on: ubuntu-latest
#    if: always()
#    needs:
#      - build-workspace
#      - lint
#      - unit-tests
#
#    steps:
#      - name: "Delete artifacts"
#        uses: geekyeggo/delete-artifact@v2
#        with:
#          name: workspace-*
