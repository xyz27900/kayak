name: "Quality Assurance"

env:
  PNPM_VERSION: 8

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-npm:
    name: "üì¶‚ÄÇBuild NPM packages"
    uses: ./.github/workflows/npm.workflow.yaml
    with:
      node-version: 18
      pnpm-version: 8

  build-workspace:
    name: "üõ†Ô∏è‚ÄÇBuild workspace"
    runs-on: ubuntu-latest
    needs:
      - build-npm

    strategy:
      matrix:
        node-version: [ 18, 19 ]

    steps:
      - name: "Checkout"
        uses: actions/checkout@v3

      - name: "Setup pnpm"
        uses: ./.github/actions/setup-pnpm
        with:
          node-version: ${{ matrix.node-version }}
          pnpm-version: ${{ env.PNPM_VERSION }}
          cache: true

      - name: "Install dependencies"
        run: pnpm install --frozen-lockfile

      - name: "Download NPM packages from storage"
        uses: actions/download-artifact@v3
        with:
          name: npm-packages-${{ matrix.node-version }}
          path: /tmp

      - run: ls -la /tmp
#
#  build-docker:
#    name: "üê≥‚ÄÇBuild Docker images"
#    uses: ./.github/workflows/docker.workflow.yaml
#  build-workspace:
#    name: "üõ†Ô∏è‚ÄÇBuild workspace"
#    runs-on: ubuntu-latest
#
#    strategy:
#      matrix:
#        node-version: [ 18, 19 ]
#
#    env:
#      PATHS: |
#        packages/core
#        packages/metamask
#        packages/cypress
#        packages/playwright
#        packages/cli
#
#    steps:
#      - name: "Checkout"
#        uses: actions/checkout@v3
#
#      - name: "Setup pnpm"
#        uses: ./.github/actions/setup-pnpm
#        with:
#          node-version: ${{ matrix.node-version }}
#          pnpm-version: ${{ env.PNPM_VERSION }}
#          cache: true
#
#      - name: "Install dependencies"
#        run: pnpm install --frozen-lockfile
#
#      - name: "Build packages"
#        uses: ./.github/actions/execute-in-paths
#        with:
#          paths: ${{ env.PATHS }}
#          command: pnpm build
#
#      - name: "Copy workspace files to /tmp/workspace"
#        run: |
#          mkdir -p /tmp/workspace
#          cp -r ./packages /tmp/workspace/packages
#          find . -name 'node_modules' -not -path './node_modules/*' -type d -prune -exec sh -c 'mkdir -p /tmp/workspace/${0#./}; cp -rT "$0" /tmp/workspace/${0#./}' {} \;
#
#      - name: "Compress workspace files"
#        run: |
#          tar -czf workspace-${{ matrix.node-version }}.tar.gz -C /tmp/workspace .
#
#      - name: "Upload workspace artifact"
#        uses: actions/upload-artifact@v3
#        with:
#          name: workspace-${{ matrix.node-version }}
#          path: workspace-${{ matrix.node-version }}.tar.gz
#
#  lint:
#    name: "üëÄ‚ÄÇLint"
#    runs-on: ubuntu-latest
#    needs:
#      - build-workspace
#
#    strategy:
#      matrix:
#        node-version: [ 18, 19 ]
#
#    env:
#      PATHS: |
#        scripts
#        docs
#        packages/cli
#        packages/core
#        packages/cypress
#        packages/metamask
#        packages/playwright
#
#    steps:
#      - name: "Checkout"
#        uses: actions/checkout@v3
#
#      - name: "Setup pnpm"
#        uses: ./.github/actions/setup-pnpm
#        with:
#          node-version: ${{ matrix.node-version }}
#          pnpm-version: ${{ env.PNPM_VERSION }}
#
#      - name: "Download workspace artifact"
#        uses: actions/download-artifact@v3
#        with:
#          name: workspace-${{ matrix.node-version }}
#          path: /tmp
#
#      - name: "Decompress workspace files"
#        run: |
#          tar -xzf /tmp/workspace-${{ matrix.node-version }}.tar.gz -C . --overwrite
#
#      - name: "Run linters"
#        uses: ./.github/actions/execute-in-paths
#        with:
#          paths: ${{ env.PATHS }}
#          command: pnpm lint
#
#  unit-tests:
#    name: "üß™‚ÄÇUnit tests"
#    runs-on: ubuntu-latest
#    needs:
#      - build-workspace
#
#    strategy:
#      matrix:
#        node-version: [ 18, 19 ]
#
#    env:
#      PATHS: |
#        packages/cli
#
#    steps:
#      - name: "Checkout"
#        uses: actions/checkout@v3
#
#      - name: "Setup pnpm"
#        uses: ./.github/actions/setup-pnpm
#        with:
#          node-version: ${{ matrix.node-version }}
#          pnpm-version: ${{ env.PNPM_VERSION }}
#
#      - name: "Download workspace artifact"
#        uses: actions/download-artifact@v3
#        with:
#          name: workspace-${{ matrix.node-version }}
#          path: /tmp
#
#      - name: "Decompress workspace files"
#        run: |
#          tar -xzf /tmp/workspace-${{ matrix.node-version }}.tar.gz -C . --overwrite
#
#      - name: "Run tests"
#        uses: ./.github/actions/execute-in-paths
#        with:
#          paths: ${{ env.PATHS }}
#          command: pnpm test
#
#  integration-tests:
#    name: "üß™‚ÄÇIntegration tests"
#    runs-on: ubuntu-latest
#    needs:
#      - build-workspace
#
#    strategy:
#      matrix:
#        node-version: [ 18, 19 ]
#
#    steps:
#      - name: "Checkout"
#        uses: actions/checkout@v3
#
#      - name: "Setup pnpm"
#        uses: ./.github/actions/setup-pnpm
#        with:
#          node-version: ${{ matrix.node-version }}
#          pnpm-version: ${{ env.PNPM_VERSION }}
#
#      - name: "Download workspace artifact"
#        uses: actions/download-artifact@v3
#        with:
#          name: workspace-${{ matrix.node-version }}
#          path: /tmp
#
#      - name: "Decompress workspace files"
#        run: |
#          tar -xzf /tmp/workspace-${{ matrix.node-version }}.tar.gz -C . --overwrite
#
#      - name: "Run tests"
#        uses: ./.github/actions/execute-in-paths
#        with:
#          paths: ${{ env.PATHS }}
#          command: pnpm test
#
#  cleanup:
#    name: "üßπ‚ÄÇCleanup"
#    runs-on: ubuntu-latest
#    if: always()
#    needs:
#      - build-workspace
#      - lint
#      - unit-tests
#
#    steps:
#      - name: "Delete artifacts"
#        uses: geekyeggo/delete-artifact@v2
#        with:
#          name: workspace-*
